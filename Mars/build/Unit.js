"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass !== "function" && superClass !== null){throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var Unit=(function(){var MarsObject=require("MarsObject");var UnitTypes={Base:(function(_MarsObject){_inherits(Base,_MarsObject);function Base(cfg){_classCallCheck(this,Base);var _this=_possibleConstructorReturn(this,Object.getPrototypeOf(Base).call(this,cfg));_this.type = "base";return _this;}return Base;})(MarsObject)};var ignoreKeys=["type","base","init"];var Unit={define:function define(){var data=arguments.length <= 0 || arguments[0] === undefined?{}:arguments[0];var type=data.type;var _data$base=data.base;var base=_data$base === undefined?"Base":_data$base;var _data$init=data.init;var init=_data$init === undefined?function(){}:_data$init;if(!UnitTypes.hasOwnProperty(base)){return;}var Unit=(function(_unitTypes$base){_inherits(Unit,_unitTypes$base);function Unit(cfg){_classCallCheck(this,Unit);var _this2=_possibleConstructorReturn(this,Object.getPrototypeOf(Unit).call(this,cfg));_this2.type = type;init.call(_this2,cfg);return _this2;}return Unit;})(unitTypes[base]);for(var key in data) {if(data.hasOwnProperty(key) && ignoreKeys.indexOf(key) === -1){Unit.prototype[key] = data[key];}}UnitTypes[type] = Unit;return Unit;},create:function create(type,data){if(unitTypes.hasOwnProperty(type)){return new UnitTypes[type](data);}}};module.exports = Unit;return Unit;})();